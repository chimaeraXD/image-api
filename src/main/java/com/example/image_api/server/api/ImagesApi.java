/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.image_api.server.api;

import com.example.image_api.server.model.Image;
import com.example.image_api.server.model.ImageRequest;
import com.example.image_api.server.model.ImageResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Images", description = "the Images API")
public interface ImagesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /images : Add an image and detect objects in the image if object detect field is enable
     * Send a JSON request body including an internet URL referencing an image, an optional label for the image, and an optional field to enable object detection.&lt;br&gt;&lt;br&gt; Returns an HTTP 200 OK with a JSON response body including the image data, its label (generate one if the user did not provide it), its identifier provided by the persistent data store, and any objects detected (if object detection was enabled).
     *
     * @param imageRequest Add a new image to database, detect objects in image is optional (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "addImageAndDetect",
        summary = "Add an image and detect objects in the image if object detect field is enable",
        tags = { "images" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ImageResponse.class))),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/images",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ImageResponse> addImageAndDetect(
        @Parameter(name = "ImageRequest", description = "Add a new image to database, detect objects in image is optional", required = true, schema = @Schema(description = "")) @Valid @RequestBody ImageRequest imageRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"imageMetadata\" : \"TBD\", \"detectedObjects\" : [ \"detectedObjects\", \"detectedObjects\" ], \"id\" : 100000, \"label\" : \"zoo\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /images : Get all image metadata saved in database
     * Return HTTP 200 OK with JSON response containing all image metadata.
     *
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "getAllImages",
        summary = "Get all image metadata saved in database",
        tags = { "images" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Image.class))),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/images",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Image>> getAllImages(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metaData\" : \"image metadata\", \"imageId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /images/objects : Get images that have the detected objects specified in the query parameter.
     * Return HTTP 200 OK with JSON response containing all image metadata.
     *
     * @param item A list of object names (required)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @Operation(
        operationId = "getAllImagesByObjects",
        summary = "Get images that have the detected objects specified in the query parameter.",
        tags = { "images" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Image.class))),
            @ApiResponse(responseCode = "400", description = "Invalid status value")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/images/objects",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Image>> getAllImagesByObjects(
        @NotNull @Parameter(name = "item", description = "A list of object names", required = true, schema = @Schema(description = "")) @Valid @RequestParam(value = "item", required = true) List<String> item
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metaData\" : \"image metadata\", \"imageId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /images/{imageId} : Find image by image id
     * Returns image metadata for the specified image
     *
     * @param imageId  (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Image not found (status code 404)
     */
    @Operation(
        operationId = "getImageByImageId",
        summary = "Find image by image id",
        tags = { "images" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Image.class))),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Image not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/images/{imageId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Image> getImageByImageId(
        @Parameter(name = "imageId", description = "", required = true, schema = @Schema(description = "")) @PathVariable("imageId") Integer imageId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metaData\" : \"image metadata\", \"imageId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
